# –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª

import numpy as np
import matplotlib.pyplot as plt

SIZE = 1000
np.random.seed(123)
x = np.random.normal(size=SIZE)
y = np.random.normal(size=SIZE)
z = (x + y) / 2

F = np.vstack([x, y, z])
FF = 1 / SIZE * F @ F.T
L, W = np.linalg.eig(FF)
WW = sorted(zip(L, W.T), key=lambda lx: lx[0], reverse=True)
WW = np.array([w[1] for w in WW])

print(sorted(L, reverse=True))

# =============
X = np.random.randn(100, 2) @ np.array([[2, 1], [1, 3]])  # –ö–æ—Ä—Ä–µ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

# 1Ô∏è‚É£ –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (–≤—ã—á–∏—Ç–∞–µ–º —Å—Ä–µ–¥–Ω–µ–µ)
X_mean = X - np.mean(X, axis=0)

# 2Ô∏è‚É£ –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É
cov_matrix = np.cov(X_mean.T)

# 3Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã –∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
eig_values, eig_vectors = np.linalg.eig(cov_matrix)

# 4Ô∏è‚É£ –í—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (—Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º)
idx = np.argsort(eig_values)[::-1]  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
eig_vectors = eig_vectors[:, idx]  # –ü–µ—Ä–µ—Å—Ç–∞–≤–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä—ã

# 5Ô∏è‚É£ –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
X_pca = X_mean @ eig_vectors[:, 0]

# üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
plt.scatter(X[:, 0], X[:, 1], alpha=0.5, label="–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
plt.quiver(
    0,
    0,
    eig_vectors[0, 0],
    eig_vectors[1, 0],
    scale=3,
    color="r",
    label="–ü–µ—Ä–≤—ã–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
)
plt.quiver(
    0,
    0,
    eig_vectors[0, 1],
    eig_vectors[1, 1],
    scale=3,
    color="b",
    label="–í—Ç–æ—Ä–æ–π –≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç",
)
plt.legend()
plt.show()
